// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TestTaskSoftserve.DAL.Database;

#nullable disable

namespace TestTaskSoftServe.DAL.Migrations
{
    [DbContext(typeof(UniversityDbContext))]
    [Migration("20240610064409_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("CourseStudent", b =>
                {
                    b.Property<Guid>("CoursesId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("StudentsId")
                        .HasColumnType("char(36)");

                    b.HasKey("CoursesId", "StudentsId");

                    b.HasIndex("StudentsId");

                    b.ToTable("CourseStudent");
                });

            modelBuilder.Entity("CourseTeacher", b =>
                {
                    b.Property<Guid>("CoursesId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("TeachersId")
                        .HasColumnType("char(36)");

                    b.HasKey("CoursesId", "TeachersId");

                    b.HasIndex("TeachersId");

                    b.ToTable("CourseTeacher");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TestTaskSoftServe.DAL.Entities.User.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("TestTaskSoftServe.DAL.Entities.User.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PersonName")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("RefreshTokenExpirationDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("TestTaskSoftserve.DAL.Entities.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c23bedfb-d070-43c3-8554-ba627502b820"),
                            Description = "Description 1",
                            Title = "Course 1"
                        },
                        new
                        {
                            Id = new Guid("75e32b4d-22ae-47e7-888e-0548d802903a"),
                            Description = "Description 2",
                            Title = "Course 2"
                        },
                        new
                        {
                            Id = new Guid("3c2948fb-fef2-47b0-92da-d8fbbca27fca"),
                            Description = "Description 3",
                            Title = "Course 3"
                        },
                        new
                        {
                            Id = new Guid("9039133d-c013-4b91-9664-d193e0d67830"),
                            Description = "Description 4",
                            Title = "Course 4"
                        },
                        new
                        {
                            Id = new Guid("90661fbe-5533-4e92-938f-3387ede54d05"),
                            Description = "Description 5",
                            Title = "Course 5"
                        },
                        new
                        {
                            Id = new Guid("f18293bf-ba2d-406f-9b04-c78a5190504e"),
                            Description = "Description 6",
                            Title = "Course 6"
                        },
                        new
                        {
                            Id = new Guid("d0e34392-7b21-49ae-964a-8b98a5506e5c"),
                            Description = "Description 7",
                            Title = "Course 7"
                        },
                        new
                        {
                            Id = new Guid("105c6f3f-dbbf-4df3-97f1-272bd988c1e6"),
                            Description = "Description 8",
                            Title = "Course 8"
                        },
                        new
                        {
                            Id = new Guid("f58cf47f-34e3-4eec-85f8-ac472b2bb594"),
                            Description = "Description 9",
                            Title = "Course 9"
                        },
                        new
                        {
                            Id = new Guid("c5515509-0d62-44f9-89ca-d9d7f796f478"),
                            Description = "Description 10",
                            Title = "Course 10"
                        },
                        new
                        {
                            Id = new Guid("dddd3fa6-32d6-489f-a3a5-28df94e1fbd9"),
                            Description = "Description 11",
                            Title = "Course 11"
                        },
                        new
                        {
                            Id = new Guid("e349fd9b-297f-4e04-8349-399b66b5ec9e"),
                            Description = "Description 12",
                            Title = "Course 12"
                        },
                        new
                        {
                            Id = new Guid("d7a00e5f-ae29-4195-af17-b1450a24c429"),
                            Description = "Description 13",
                            Title = "Course 13"
                        },
                        new
                        {
                            Id = new Guid("2d90d7b4-187d-4625-99e4-9ffce997e26a"),
                            Description = "Description 14",
                            Title = "Course 14"
                        },
                        new
                        {
                            Id = new Guid("29a7c329-7c2a-4311-b9d3-1664929db4ca"),
                            Description = "Description 15",
                            Title = "Course 15"
                        },
                        new
                        {
                            Id = new Guid("324a22f3-3c5e-4e42-97c5-203abd8ba03e"),
                            Description = "Description 16",
                            Title = "Course 16"
                        },
                        new
                        {
                            Id = new Guid("5798cd04-ca2a-4d13-a80b-ce504c62d5f9"),
                            Description = "Description 17",
                            Title = "Course 17"
                        },
                        new
                        {
                            Id = new Guid("466d87d5-06fd-4c92-914f-5c5c4adfc3d9"),
                            Description = "Description 18",
                            Title = "Course 18"
                        },
                        new
                        {
                            Id = new Guid("fcd7b1af-a9b3-493e-b43d-7c41fd3a7666"),
                            Description = "Description 19",
                            Title = "Course 19"
                        },
                        new
                        {
                            Id = new Guid("89dfcfdd-3eea-4a1a-99d8-00ed79e6f506"),
                            Description = "Description 20",
                            Title = "Course 20"
                        });
                });

            modelBuilder.Entity("TestTaskSoftserve.DAL.Entities.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Group")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("StudyYear")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = new Guid("170423fb-907c-46ba-8c4d-89fff5f84b43"),
                            Age = 28,
                            Group = "Group 1",
                            Name = "Student's name 1",
                            StudyYear = 1,
                            Surname = "Student's surname 1"
                        },
                        new
                        {
                            Id = new Guid("c9fdd8ab-6827-42cf-a269-1a330e2bbd40"),
                            Age = 33,
                            Group = "Group 2",
                            Name = "Student's name 2",
                            StudyYear = 4,
                            Surname = "Student's surname 2"
                        },
                        new
                        {
                            Id = new Guid("d19d02f5-4eb7-432e-9de9-3e3a9c40f16e"),
                            Age = 66,
                            Group = "Group 3",
                            Name = "Student's name 3",
                            StudyYear = 0,
                            Surname = "Student's surname 3"
                        },
                        new
                        {
                            Id = new Guid("df778a58-8e85-4510-a25e-76af54282209"),
                            Age = 109,
                            Group = "Group 4",
                            Name = "Student's name 4",
                            StudyYear = 0,
                            Surname = "Student's surname 4"
                        },
                        new
                        {
                            Id = new Guid("144440a7-07fd-4762-b001-e50f8485b151"),
                            Age = 72,
                            Group = "Group 5",
                            Name = "Student's name 5",
                            StudyYear = 14,
                            Surname = "Student's surname 5"
                        },
                        new
                        {
                            Id = new Guid("d97b1c40-a546-4fd6-9392-4466adbee4d0"),
                            Age = 56,
                            Group = "Group 6",
                            Name = "Student's name 6",
                            StudyYear = 13,
                            Surname = "Student's surname 6"
                        },
                        new
                        {
                            Id = new Guid("c9952b3f-bbcb-49dd-a547-a5a8b68c91a4"),
                            Age = 65,
                            Group = "Group 7",
                            Name = "Student's name 7",
                            StudyYear = 4,
                            Surname = "Student's surname 7"
                        },
                        new
                        {
                            Id = new Guid("6275f4ac-70ce-4bd3-b446-ba27dc37fb3e"),
                            Age = 47,
                            Group = "Group 8",
                            Name = "Student's name 8",
                            StudyYear = 18,
                            Surname = "Student's surname 8"
                        },
                        new
                        {
                            Id = new Guid("ba8911cd-b330-4de5-a0a9-fb79d6224ac5"),
                            Age = 93,
                            Group = "Group 9",
                            Name = "Student's name 9",
                            StudyYear = 15,
                            Surname = "Student's surname 9"
                        },
                        new
                        {
                            Id = new Guid("16c4e638-d049-4c91-87d1-9a7a8f856706"),
                            Age = 21,
                            Group = "Group 10",
                            Name = "Student's name 10",
                            StudyYear = 27,
                            Surname = "Student's surname 10"
                        });
                });

            modelBuilder.Entity("TestTaskSoftserve.DAL.Entities.Teacher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<int>("Experience")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("71e26009-f453-46c0-a4f9-df6556a368d3"),
                            Age = 53,
                            Experience = 2,
                            Name = "Teacher's name 1",
                            Surname = "Teacher's surname 1"
                        },
                        new
                        {
                            Id = new Guid("e96afaee-92fa-43bd-85e0-b34cb8f7502f"),
                            Age = 50,
                            Experience = 5,
                            Name = "Teacher's name 2",
                            Surname = "Teacher's surname 2"
                        },
                        new
                        {
                            Id = new Guid("2920ea02-f7f3-415b-915a-4448117d6ddf"),
                            Age = 20,
                            Experience = 1,
                            Name = "Teacher's name 3",
                            Surname = "Teacher's surname 3"
                        },
                        new
                        {
                            Id = new Guid("bb8b413b-d9b3-48ef-b243-651004c995ec"),
                            Age = 49,
                            Experience = 11,
                            Name = "Teacher's name 4",
                            Surname = "Teacher's surname 4"
                        },
                        new
                        {
                            Id = new Guid("bd2172b3-eec6-4346-8de5-508beeb4c070"),
                            Age = 52,
                            Experience = 6,
                            Name = "Teacher's name 5",
                            Surname = "Teacher's surname 5"
                        },
                        new
                        {
                            Id = new Guid("e37a28b7-8252-425c-af62-3f39399c9fa1"),
                            Age = 45,
                            Experience = 10,
                            Name = "Teacher's name 6",
                            Surname = "Teacher's surname 6"
                        },
                        new
                        {
                            Id = new Guid("2e672988-007c-4d59-8cd4-8c31ab637265"),
                            Age = 62,
                            Experience = 12,
                            Name = "Teacher's name 7",
                            Surname = "Teacher's surname 7"
                        },
                        new
                        {
                            Id = new Guid("fb8e8494-26ef-475f-a4da-fd630fd59117"),
                            Age = 25,
                            Experience = 0,
                            Name = "Teacher's name 8",
                            Surname = "Teacher's surname 8"
                        },
                        new
                        {
                            Id = new Guid("895ae290-1f8a-4450-9ef4-40f7dc8725c3"),
                            Age = 30,
                            Experience = 23,
                            Name = "Teacher's name 9",
                            Surname = "Teacher's surname 9"
                        },
                        new
                        {
                            Id = new Guid("ec6ae8b7-54ea-4fa5-8665-40b4b3a09f4d"),
                            Age = 64,
                            Experience = 28,
                            Name = "Teacher's name 10",
                            Surname = "Teacher's surname 10"
                        });
                });

            modelBuilder.Entity("CourseStudent", b =>
                {
                    b.HasOne("TestTaskSoftserve.DAL.Entities.Course", null)
                        .WithMany()
                        .HasForeignKey("CoursesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestTaskSoftserve.DAL.Entities.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CourseTeacher", b =>
                {
                    b.HasOne("TestTaskSoftserve.DAL.Entities.Course", null)
                        .WithMany()
                        .HasForeignKey("CoursesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestTaskSoftserve.DAL.Entities.Teacher", null)
                        .WithMany()
                        .HasForeignKey("TeachersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("TestTaskSoftServe.DAL.Entities.User.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("TestTaskSoftServe.DAL.Entities.User.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("TestTaskSoftServe.DAL.Entities.User.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("TestTaskSoftServe.DAL.Entities.User.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestTaskSoftServe.DAL.Entities.User.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("TestTaskSoftServe.DAL.Entities.User.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
