// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TestTaskSoftserve.DAL.Database;

#nullable disable

namespace TestTaskSoftServe.DAL.Migrations
{
    [DbContext(typeof(UniversityDbContext))]
    partial class UniversityDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("CourseStudent", b =>
                {
                    b.Property<Guid>("CoursesId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("StudentsId")
                        .HasColumnType("char(36)");

                    b.HasKey("CoursesId", "StudentsId");

                    b.HasIndex("StudentsId");

                    b.ToTable("CourseStudent");
                });

            modelBuilder.Entity("CourseTeacher", b =>
                {
                    b.Property<Guid>("CoursesId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("TeachersId")
                        .HasColumnType("char(36)");

                    b.HasKey("CoursesId", "TeachersId");

                    b.HasIndex("TeachersId");

                    b.ToTable("CourseTeacher");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TestTaskSoftServe.DAL.Entities.User.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("TestTaskSoftServe.DAL.Entities.User.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PersonName")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("RefreshTokenExpirationDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("TestTaskSoftserve.DAL.Entities.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5ac091da-a966-4f65-a671-cdef33fa17e9"),
                            Description = "Description 1",
                            Title = "Course 1"
                        },
                        new
                        {
                            Id = new Guid("afd2bc30-d83d-46d0-acc7-ef7c180d6221"),
                            Description = "Description 2",
                            Title = "Course 2"
                        },
                        new
                        {
                            Id = new Guid("59b218c6-8e06-4614-a61a-a0b2c4f5037e"),
                            Description = "Description 3",
                            Title = "Course 3"
                        },
                        new
                        {
                            Id = new Guid("b3c3cd66-20a2-4c44-8b05-940e2c9edb2f"),
                            Description = "Description 4",
                            Title = "Course 4"
                        },
                        new
                        {
                            Id = new Guid("a40aef7f-6f73-4e0e-b2e3-2905324272c4"),
                            Description = "Description 5",
                            Title = "Course 5"
                        },
                        new
                        {
                            Id = new Guid("d5a4724e-b4b2-4c15-936f-83cd0217d9d5"),
                            Description = "Description 6",
                            Title = "Course 6"
                        },
                        new
                        {
                            Id = new Guid("b72bd0ef-0c70-42ca-ab57-8cfb4548ea1b"),
                            Description = "Description 7",
                            Title = "Course 7"
                        },
                        new
                        {
                            Id = new Guid("b4f955ad-0961-4388-bece-329275d02a3f"),
                            Description = "Description 8",
                            Title = "Course 8"
                        },
                        new
                        {
                            Id = new Guid("d26feeb7-1a9c-4706-a4f5-e41b02d45a90"),
                            Description = "Description 9",
                            Title = "Course 9"
                        },
                        new
                        {
                            Id = new Guid("8e408633-a43f-4e31-a596-14d2a87b2e8a"),
                            Description = "Description 10",
                            Title = "Course 10"
                        },
                        new
                        {
                            Id = new Guid("4d8444e3-33d4-4683-a5bf-0771786213ee"),
                            Description = "Description 11",
                            Title = "Course 11"
                        },
                        new
                        {
                            Id = new Guid("f58eb51e-faa3-4b5f-9866-1006b679eb7a"),
                            Description = "Description 12",
                            Title = "Course 12"
                        },
                        new
                        {
                            Id = new Guid("3852a934-af96-46e7-a5d8-c86a9923d054"),
                            Description = "Description 13",
                            Title = "Course 13"
                        },
                        new
                        {
                            Id = new Guid("6a5232bf-d055-4e5d-9007-959076aff117"),
                            Description = "Description 14",
                            Title = "Course 14"
                        },
                        new
                        {
                            Id = new Guid("5ff13a15-bbde-498f-b456-4ad399665ad8"),
                            Description = "Description 15",
                            Title = "Course 15"
                        },
                        new
                        {
                            Id = new Guid("d9cf4fde-7035-486b-b675-e25c2c9cfb58"),
                            Description = "Description 16",
                            Title = "Course 16"
                        },
                        new
                        {
                            Id = new Guid("2a86b21b-d7c6-43a9-b2f0-79d03283037a"),
                            Description = "Description 17",
                            Title = "Course 17"
                        },
                        new
                        {
                            Id = new Guid("0f36f97b-f000-4d25-8967-1456927db432"),
                            Description = "Description 18",
                            Title = "Course 18"
                        },
                        new
                        {
                            Id = new Guid("7bb50a13-a1d1-4b4e-a637-8a12b5b94280"),
                            Description = "Description 19",
                            Title = "Course 19"
                        },
                        new
                        {
                            Id = new Guid("341b29a7-0e51-4644-a597-68a966253b5d"),
                            Description = "Description 20",
                            Title = "Course 20"
                        });
                });

            modelBuilder.Entity("TestTaskSoftserve.DAL.Entities.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Group")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("StudyYear")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = new Guid("16ffa2d5-cb4e-4f8e-9f2b-cf8e7b61dc3b"),
                            Age = 41,
                            Group = "Group 1",
                            Name = "Student's name 1",
                            StudyYear = 1,
                            Surname = "Student's surname 1"
                        },
                        new
                        {
                            Id = new Guid("dd4e2eaa-f972-4ae9-bd4e-f35a5e37b074"),
                            Age = 32,
                            Group = "Group 2",
                            Name = "Student's name 2",
                            StudyYear = 5,
                            Surname = "Student's surname 2"
                        },
                        new
                        {
                            Id = new Guid("d80c2c21-4603-4da9-b857-89286adf5cfd"),
                            Age = 33,
                            Group = "Group 3",
                            Name = "Student's name 3",
                            StudyYear = 0,
                            Surname = "Student's surname 3"
                        },
                        new
                        {
                            Id = new Guid("f0e9d527-3ea5-4ce9-9f7f-fc832466c1c0"),
                            Age = 34,
                            Group = "Group 4",
                            Name = "Student's name 4",
                            StudyYear = 0,
                            Surname = "Student's surname 4"
                        },
                        new
                        {
                            Id = new Guid("95c95bdc-b739-4a58-b7bd-fd0e8da308a9"),
                            Age = 51,
                            Group = "Group 5",
                            Name = "Student's name 5",
                            StudyYear = 7,
                            Surname = "Student's surname 5"
                        },
                        new
                        {
                            Id = new Guid("23d68fd5-ac3c-4707-9dc6-0f1eb21cd264"),
                            Age = 64,
                            Group = "Group 6",
                            Name = "Student's name 6",
                            StudyYear = 14,
                            Surname = "Student's surname 6"
                        },
                        new
                        {
                            Id = new Guid("006fcd1d-ce66-4455-9dce-7d05b475cd36"),
                            Age = 25,
                            Group = "Group 7",
                            Name = "Student's name 7",
                            StudyYear = 4,
                            Surname = "Student's surname 7"
                        },
                        new
                        {
                            Id = new Guid("7fb5119d-6bc5-41c6-baa8-77c8591a8d53"),
                            Age = 103,
                            Group = "Group 8",
                            Name = "Student's name 8",
                            StudyYear = 3,
                            Surname = "Student's surname 8"
                        },
                        new
                        {
                            Id = new Guid("306ea955-fc44-4cdf-918a-d0bf2bdd550e"),
                            Age = 32,
                            Group = "Group 9",
                            Name = "Student's name 9",
                            StudyYear = 26,
                            Surname = "Student's surname 9"
                        },
                        new
                        {
                            Id = new Guid("043e5fbb-94cf-436d-bc68-f9abd1133c54"),
                            Age = 91,
                            Group = "Group 10",
                            Name = "Student's name 10",
                            StudyYear = 22,
                            Surname = "Student's surname 10"
                        });
                });

            modelBuilder.Entity("TestTaskSoftserve.DAL.Entities.Teacher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<int>("Experience")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ace82b6c-fd2f-4406-a8ba-2c7f179c9bb3"),
                            Age = 35,
                            Experience = 1,
                            Name = "Teacher's name 1",
                            Surname = "Teacher's surname 1"
                        },
                        new
                        {
                            Id = new Guid("12de37db-5368-49f3-b58c-272d23cf16a1"),
                            Age = 64,
                            Experience = 0,
                            Name = "Teacher's name 2",
                            Surname = "Teacher's surname 2"
                        },
                        new
                        {
                            Id = new Guid("06b957ee-f78b-4c66-8876-f7b5f126add6"),
                            Age = 64,
                            Experience = 8,
                            Name = "Teacher's name 3",
                            Surname = "Teacher's surname 3"
                        },
                        new
                        {
                            Id = new Guid("7a834bcc-5f60-4321-85f9-ad8f88a30624"),
                            Age = 59,
                            Experience = 0,
                            Name = "Teacher's name 4",
                            Surname = "Teacher's surname 4"
                        },
                        new
                        {
                            Id = new Guid("55079f63-0c36-4b91-934d-3afd33ad3f48"),
                            Age = 40,
                            Experience = 14,
                            Name = "Teacher's name 5",
                            Surname = "Teacher's surname 5"
                        },
                        new
                        {
                            Id = new Guid("3dd35bf3-7621-4d53-b6b2-bc11f967c41f"),
                            Age = 33,
                            Experience = 12,
                            Name = "Teacher's name 6",
                            Surname = "Teacher's surname 6"
                        },
                        new
                        {
                            Id = new Guid("2d27802d-f8ce-42ad-aab6-c8551e2fa1c7"),
                            Age = 26,
                            Experience = 14,
                            Name = "Teacher's name 7",
                            Surname = "Teacher's surname 7"
                        },
                        new
                        {
                            Id = new Guid("3d2e5aa0-c3ed-47d1-8faf-15741bbf6175"),
                            Age = 62,
                            Experience = 17,
                            Name = "Teacher's name 8",
                            Surname = "Teacher's surname 8"
                        },
                        new
                        {
                            Id = new Guid("066ddf41-46c7-48e3-8493-a3550db85b1c"),
                            Age = 34,
                            Experience = 20,
                            Name = "Teacher's name 9",
                            Surname = "Teacher's surname 9"
                        },
                        new
                        {
                            Id = new Guid("9704f246-4e39-4d97-84da-ae386fbafe39"),
                            Age = 51,
                            Experience = 8,
                            Name = "Teacher's name 10",
                            Surname = "Teacher's surname 10"
                        });
                });

            modelBuilder.Entity("CourseStudent", b =>
                {
                    b.HasOne("TestTaskSoftserve.DAL.Entities.Course", null)
                        .WithMany()
                        .HasForeignKey("CoursesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestTaskSoftserve.DAL.Entities.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CourseTeacher", b =>
                {
                    b.HasOne("TestTaskSoftserve.DAL.Entities.Course", null)
                        .WithMany()
                        .HasForeignKey("CoursesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestTaskSoftserve.DAL.Entities.Teacher", null)
                        .WithMany()
                        .HasForeignKey("TeachersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("TestTaskSoftServe.DAL.Entities.User.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("TestTaskSoftServe.DAL.Entities.User.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("TestTaskSoftServe.DAL.Entities.User.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("TestTaskSoftServe.DAL.Entities.User.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestTaskSoftServe.DAL.Entities.User.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("TestTaskSoftServe.DAL.Entities.User.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
