// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TestTaskSoftserve.DAL.Database;

#nullable disable

namespace TestTaskSoftServe.DAL.Migrations
{
    [DbContext(typeof(UniversityDbContext))]
    [Migration("20240609102956_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("CourseStudent", b =>
                {
                    b.Property<Guid>("CoursesId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("StudentsId")
                        .HasColumnType("char(36)");

                    b.HasKey("CoursesId", "StudentsId");

                    b.HasIndex("StudentsId");

                    b.ToTable("CourseStudent");
                });

            modelBuilder.Entity("CourseTeacher", b =>
                {
                    b.Property<Guid>("CoursesId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("TeachersId")
                        .HasColumnType("char(36)");

                    b.HasKey("CoursesId", "TeachersId");

                    b.HasIndex("TeachersId");

                    b.ToTable("CourseTeacher");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TestTaskSoftServe.DAL.Entities.User.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("TestTaskSoftServe.DAL.Entities.User.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PersonName")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("longtext");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("TestTaskSoftserve.DAL.Entities.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("06a75fb1-0b59-4907-9ffc-222548311684"),
                            Description = "Description 1",
                            Title = "Course 1"
                        },
                        new
                        {
                            Id = new Guid("2f0b3f5b-a129-4568-a229-8c19e810ff40"),
                            Description = "Description 2",
                            Title = "Course 2"
                        },
                        new
                        {
                            Id = new Guid("44bf0c42-ffb2-45ca-ac0e-8d2a7d17d8cd"),
                            Description = "Description 3",
                            Title = "Course 3"
                        },
                        new
                        {
                            Id = new Guid("69adcb06-034b-4651-9006-d615a33042a0"),
                            Description = "Description 4",
                            Title = "Course 4"
                        },
                        new
                        {
                            Id = new Guid("b7eac20b-9f15-4ad9-8463-abb20e390479"),
                            Description = "Description 5",
                            Title = "Course 5"
                        },
                        new
                        {
                            Id = new Guid("5508581b-aebd-45bb-9db0-be61545fa8d3"),
                            Description = "Description 6",
                            Title = "Course 6"
                        },
                        new
                        {
                            Id = new Guid("350e3b62-7f72-4e75-a2f2-8a5229864ba8"),
                            Description = "Description 7",
                            Title = "Course 7"
                        },
                        new
                        {
                            Id = new Guid("c13c20dc-f0f6-4d5d-b24a-cca5d3a58590"),
                            Description = "Description 8",
                            Title = "Course 8"
                        },
                        new
                        {
                            Id = new Guid("6ee88dd5-4e86-436c-b25a-d6e8dc1aacd5"),
                            Description = "Description 9",
                            Title = "Course 9"
                        },
                        new
                        {
                            Id = new Guid("2e69a572-63b5-401e-ba11-a08006a518b8"),
                            Description = "Description 10",
                            Title = "Course 10"
                        },
                        new
                        {
                            Id = new Guid("2b9cc3b9-62ab-410e-b21a-5dc65e722e00"),
                            Description = "Description 11",
                            Title = "Course 11"
                        },
                        new
                        {
                            Id = new Guid("45b09f1f-e7ad-4f20-afcc-eb09b171b765"),
                            Description = "Description 12",
                            Title = "Course 12"
                        },
                        new
                        {
                            Id = new Guid("41eab40b-f4c1-44fb-8ca6-9384ad8b8e34"),
                            Description = "Description 13",
                            Title = "Course 13"
                        },
                        new
                        {
                            Id = new Guid("ad9b7ea5-1d0d-4a57-a241-005f1398f1b3"),
                            Description = "Description 14",
                            Title = "Course 14"
                        },
                        new
                        {
                            Id = new Guid("5af59633-6e41-405a-aaca-94da44e843b1"),
                            Description = "Description 15",
                            Title = "Course 15"
                        },
                        new
                        {
                            Id = new Guid("9b3c7645-b621-4ca0-a819-653fba481bac"),
                            Description = "Description 16",
                            Title = "Course 16"
                        },
                        new
                        {
                            Id = new Guid("294b4ff1-2a54-462c-80da-c324b3647ad6"),
                            Description = "Description 17",
                            Title = "Course 17"
                        },
                        new
                        {
                            Id = new Guid("29828ec6-3890-437b-8a87-89bb4890e5e5"),
                            Description = "Description 18",
                            Title = "Course 18"
                        },
                        new
                        {
                            Id = new Guid("71428de3-b153-41db-aadb-725169e5602a"),
                            Description = "Description 19",
                            Title = "Course 19"
                        },
                        new
                        {
                            Id = new Guid("9546f6c9-41cb-4a2b-8a22-636f0b93eee1"),
                            Description = "Description 20",
                            Title = "Course 20"
                        });
                });

            modelBuilder.Entity("TestTaskSoftserve.DAL.Entities.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Group")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("StudyYear")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9b058a28-df23-41a1-88ad-7d61788b573b"),
                            Age = 102,
                            Group = "Group 1",
                            Name = "Student's name 1",
                            StudyYear = 0,
                            Surname = "Student's surname 1"
                        },
                        new
                        {
                            Id = new Guid("3e4ea4ac-ddfc-434d-abdc-a5136d19cb2b"),
                            Age = 22,
                            Group = "Group 2",
                            Name = "Student's name 2",
                            StudyYear = 1,
                            Surname = "Student's surname 2"
                        },
                        new
                        {
                            Id = new Guid("43786dc2-9025-42d0-9e3a-f9f5a3dddd98"),
                            Age = 24,
                            Group = "Group 3",
                            Name = "Student's name 3",
                            StudyYear = 4,
                            Surname = "Student's surname 3"
                        },
                        new
                        {
                            Id = new Guid("21dc435f-3b04-4cbb-ad87-228d4c74b411"),
                            Age = 99,
                            Group = "Group 4",
                            Name = "Student's name 4",
                            StudyYear = 5,
                            Surname = "Student's surname 4"
                        },
                        new
                        {
                            Id = new Guid("5becd8e8-85fb-4312-a9b9-d49137e87f94"),
                            Age = 99,
                            Group = "Group 5",
                            Name = "Student's name 5",
                            StudyYear = 14,
                            Surname = "Student's surname 5"
                        },
                        new
                        {
                            Id = new Guid("8d7aad17-847d-4061-be43-5680849b6df5"),
                            Age = 102,
                            Group = "Group 6",
                            Name = "Student's name 6",
                            StudyYear = 8,
                            Surname = "Student's surname 6"
                        },
                        new
                        {
                            Id = new Guid("1fdd4289-315b-42c3-9c65-f4abe766c739"),
                            Age = 56,
                            Group = "Group 7",
                            Name = "Student's name 7",
                            StudyYear = 16,
                            Surname = "Student's surname 7"
                        },
                        new
                        {
                            Id = new Guid("97206f88-6722-4493-9724-fa620563abf1"),
                            Age = 63,
                            Group = "Group 8",
                            Name = "Student's name 8",
                            StudyYear = 23,
                            Surname = "Student's surname 8"
                        },
                        new
                        {
                            Id = new Guid("9ae9be50-2781-4a3c-af73-bc11c673e237"),
                            Age = 69,
                            Group = "Group 9",
                            Name = "Student's name 9",
                            StudyYear = 16,
                            Surname = "Student's surname 9"
                        },
                        new
                        {
                            Id = new Guid("ede7d796-ad5a-45f7-a233-87c35798d4c4"),
                            Age = 32,
                            Group = "Group 10",
                            Name = "Student's name 10",
                            StudyYear = 5,
                            Surname = "Student's surname 10"
                        });
                });

            modelBuilder.Entity("TestTaskSoftserve.DAL.Entities.Teacher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<int>("Experience")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2df720fd-efe2-4f69-b353-7c723888f99b"),
                            Age = 22,
                            Experience = 2,
                            Name = "Teacher's name 1",
                            Surname = "Teacher's surname 1"
                        },
                        new
                        {
                            Id = new Guid("3bbd5298-1a1b-43a7-b88e-fd3af61c6acd"),
                            Age = 30,
                            Experience = 2,
                            Name = "Teacher's name 2",
                            Surname = "Teacher's surname 2"
                        },
                        new
                        {
                            Id = new Guid("abb04b91-fdc1-48d3-9b28-f66ad32c9b46"),
                            Age = 40,
                            Experience = 4,
                            Name = "Teacher's name 3",
                            Surname = "Teacher's surname 3"
                        },
                        new
                        {
                            Id = new Guid("cbcf53ef-082e-4806-a823-b69b76eb7332"),
                            Age = 48,
                            Experience = 8,
                            Name = "Teacher's name 4",
                            Surname = "Teacher's surname 4"
                        },
                        new
                        {
                            Id = new Guid("299c8444-7ae9-4e3b-a678-b2edc2bb1165"),
                            Age = 25,
                            Experience = 9,
                            Name = "Teacher's name 5",
                            Surname = "Teacher's surname 5"
                        },
                        new
                        {
                            Id = new Guid("338ff14f-5d1c-4dbd-a425-eb5426bed2bd"),
                            Age = 18,
                            Experience = 15,
                            Name = "Teacher's name 6",
                            Surname = "Teacher's surname 6"
                        },
                        new
                        {
                            Id = new Guid("e1681851-b3de-4e08-b0fa-05cbd4cc7b78"),
                            Age = 57,
                            Experience = 5,
                            Name = "Teacher's name 7",
                            Surname = "Teacher's surname 7"
                        },
                        new
                        {
                            Id = new Guid("b44beef0-5237-4c3b-bdcf-968058ba2109"),
                            Age = 36,
                            Experience = 15,
                            Name = "Teacher's name 8",
                            Surname = "Teacher's surname 8"
                        },
                        new
                        {
                            Id = new Guid("1194fcfc-6176-4397-b58f-5e0ed7d910ce"),
                            Age = 21,
                            Experience = 22,
                            Name = "Teacher's name 9",
                            Surname = "Teacher's surname 9"
                        },
                        new
                        {
                            Id = new Guid("5573471d-b765-4349-b529-ee90ce9bd804"),
                            Age = 41,
                            Experience = 23,
                            Name = "Teacher's name 10",
                            Surname = "Teacher's surname 10"
                        });
                });

            modelBuilder.Entity("CourseStudent", b =>
                {
                    b.HasOne("TestTaskSoftserve.DAL.Entities.Course", null)
                        .WithMany()
                        .HasForeignKey("CoursesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestTaskSoftserve.DAL.Entities.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CourseTeacher", b =>
                {
                    b.HasOne("TestTaskSoftserve.DAL.Entities.Course", null)
                        .WithMany()
                        .HasForeignKey("CoursesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestTaskSoftserve.DAL.Entities.Teacher", null)
                        .WithMany()
                        .HasForeignKey("TeachersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("TestTaskSoftServe.DAL.Entities.User.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("TestTaskSoftServe.DAL.Entities.User.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("TestTaskSoftServe.DAL.Entities.User.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("TestTaskSoftServe.DAL.Entities.User.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestTaskSoftServe.DAL.Entities.User.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("TestTaskSoftServe.DAL.Entities.User.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
